openapi: 3.0.3
info:
  title: AI Chat Application API
  description: |
    A comprehensive API for an AI chat application that supports real-time messaging, 
    conversation management, and user authentication.
    
    ## Features
    - User authentication with JWT tokens
    - Real-time chat functionality
    - Conversation management
    - File upload support
    - WebSocket integration
    
    ## Authentication
    This API uses JWT Bearer token authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.example.com
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and return a JWT token
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
            examples:
              valid_user:
                summary: Valid user credentials
                value:
                  email: user@example.com
                  password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout the current user and invalidate the JWT token
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chat/conversations:
    get:
      tags:
        - Chat
      summary: List conversations
      description: Get all conversations for the authenticated user
      operationId: getConversations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of conversations per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Conversations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Chat
      summary: Create conversation
      description: Create a new conversation
      operationId: createConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Chat Session"
                description:
                  type: string
                  example: "Discussion about AI capabilities"
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  conversation:
                    $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /chat/conversations/{id}:
    get:
      tags:
        - Chat
      summary: Get conversation
      description: Get a specific conversation with its messages
      operationId: getConversation
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Conversation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  conversation:
                    $ref: '#/components/schemas/ConversationWithMessages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Chat
      summary: Update conversation
      description: Update conversation details
      operationId: updateConversation
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Chat Title"
                description:
                  type: string
                  example: "Updated description"
      responses:
        '200':
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  conversation:
                    $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Chat
      summary: Delete conversation
      description: Delete a conversation and all its messages
      operationId: deleteConversation
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Conversation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Conversation deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chat/conversations/{id}/messages:
    get:
      tags:
        - Chat
      summary: Get messages
      description: Get messages for a specific conversation
      operationId: getMessages
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of messages per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Chat
      summary: Send message
      description: Send a new message in a conversation
      operationId: sendMessage
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "Hello, how can you help me today?"
                attachments:
                  type: array
                  items:
                    type: string
                  example: ["file1.pdf", "image.jpg"]
            examples:
              text_message:
                summary: Simple text message
                value:
                  content: "Hello, how can you help me today?"
              message_with_attachments:
                summary: Message with file attachments
                value:
                  content: "Please review these documents"
                  attachments: ["document.pdf", "chart.png"]
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    $ref: '#/components/schemas/Message'
                  ai_response:
                    $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  /chat/upload:
    post:
      tags:
        - Chat
      summary: Upload file
      description: Upload a file for use in conversations
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                conversation_id:
                  type: integer
                  description: Associated conversation ID
                  example: 1
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  file:
                    $ref: '#/components/schemas/UploadedFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /chat/stream:
    get:
      tags:
        - Chat
      summary: WebSocket endpoint
      description: WebSocket endpoint for real-time chat functionality
      operationId: chatWebSocket
      responses:
        '101':
          description: WebSocket connection established
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Conversation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "AI Discussion"
        description:
          type: string
          example: "General AI conversation"
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        message_count:
          type: integer
          example: 5

    ConversationWithMessages:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            messages:
              type: array
              items:
                $ref: '#/components/schemas/Message'

    Message:
      type: object
      properties:
        id:
          type: integer
          example: 1
        conversation_id:
          type: integer
          example: 1
        content:
          type: string
          example: "Hello, how can you help me?"
        role:
          type: string
          enum: [user, assistant, system]
          example: "user"
        attachments:
          type: array
          items:
            type: string
          example: ["file1.pdf"]
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UploadedFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: "document.pdf"
        original_name:
          type: string
          example: "my-document.pdf"
        mime_type:
          type: string
          example: "application/pdf"
        size:
          type: integer
          example: 1024576
        path:
          type: string
          example: "/uploads/documents/document.pdf"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        last_page:
          type: integer
          example: 5
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 20

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Unauthorized access"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Resource not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Validation failed"
            errors:
              email: ["The email field is required."]
              password: ["The password must be at least 8 characters."]

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Chat
    description: Chat functionality and conversation management