services:
  # MySQL Database - Production
  mysql:
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./create.sql:/docker-entrypoint-initdb.d/create.sql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports: []  # Remove external port exposure in production
    command: --default-authentication-plugin=mysql_native_password

  # Redis - Production
  redis:
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports: []  # Remove external port exposure in production

  # PHP Web Application - Production
  web:
    restart: always
    environment:
      - CI_ENVIRONMENT=production
      - database.default.hostname=mysql
      - database.default.database=${MYSQL_DATABASE}
      - database.default.username=${MYSQL_USER}
      - database.default.password=${MYSQL_PASSWORD}
      - session.driver=RedisHandler
      - session.savePath=tcp://redis:6379?auth=${REDIS_PASSWORD}
      - encryption.key=${ENCRYPTION_KEY}
    ports: []  # Remove direct port exposure, use nginx proxy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # WebSocket Server - Production
  websocket:
    restart: always
    environment:
      - CI_ENVIRONMENT=production
      - database.default.hostname=mysql
      - database.default.database=${MYSQL_DATABASE}
      - database.default.username=${MYSQL_USER}
      - database.default.password=${MYSQL_PASSWORD}
    ports: []  # Remove direct port exposure, use nginx proxy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Nginx Load Balancer - Production
  nginx:
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Log aggregation
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: codeigniter-chat-logstash
    restart: always
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - web_logs:/logs/web:ro
      - nginx_logs:/logs/nginx:ro
    networks:
      - chat-network
    depends_on:
      - elasticsearch

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: codeigniter-chat-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - chat-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: codeigniter-chat-prometheus
    restart: always
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - chat-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: codeigniter-chat-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - chat-network
    depends_on:
      - prometheus

volumes:
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local